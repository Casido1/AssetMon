// <auto-generated />
using System;
using AssetMon.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AssetMon.Data.Migrations
{
    [DbContext(typeof(AssetMonContext))]
    [Migration("20230220224103_InitialData")]
    partial class InitialData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AssetMon.Models.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = "1ee125f5-3be4-4bda-ae4c-d471762c414c",
                            City = "PortHarcourt",
                            Country = "Nigeria",
                            State = "Rivers",
                            Street = "3 Twin Tower, Igbogo Road, Choba"
                        },
                        new
                        {
                            Id = "6c649c3c-a0f1-4065-832a-193cd3d9085d",
                            City = "PortHarcourt",
                            Country = "Nigeria",
                            State = "Rivers",
                            Street = "4 Twin Tower, Igbogo Road, Choba"
                        },
                        new
                        {
                            Id = "21443f16-6bfb-4b07-8f35-d4a876266d5b",
                            City = "PortHarcourt",
                            Country = "Nigeria",
                            State = "Rivers",
                            Street = "5 Twin Tower, Igbogo Road, Choba"
                        },
                        new
                        {
                            Id = "d23d56ce-9953-4647-b594-340a50bf7320",
                            City = "PortHarcourt",
                            Country = "Nigeria",
                            State = "Rivers",
                            Street = "6 Twin Tower, Igbogo Road, Choba"
                        },
                        new
                        {
                            Id = "666e993e-bd32-4097-a572-702228c0df60",
                            City = "PortHarcourt",
                            Country = "Nigeria",
                            State = "Rivers",
                            Street = "4 radio Estate, Ozuoba"
                        });
                });

            modelBuilder.Entity("AssetMon.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1ee125f5-3be4-4bda-ae4c-d471762c414c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b80b6a1-b72c-4de6-9cf6-01b57a03f235",
                            Email = "ahmedsani@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ahmed",
                            LastName = "Sani",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b7b71cf0-0628-46e6-aca9-ca42b3eb5482",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "6c649c3c-a0f1-4065-832a-193cd3d9085d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64465da4-1b8d-4201-9ccc-b871b7d15cbb",
                            Email = "idrissalisu@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Idris",
                            LastName = "Salisu",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe06fe85-6fb4-4bdc-af8e-4453b66b4fc5",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "21443f16-6bfb-4b07-8f35-d4a876266d5b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20a590f3-a4ed-41ed-a083-931e58edc4dc",
                            Email = "abubakarmohammed@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Abubakar",
                            LastName = "Mohammed",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ef4c0c6-c3b1-46fb-a6b3-e7f6dbb90e2e",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "d23d56ce-9953-4647-b594-340a50bf7320",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b975a7d-c251-46f4-8a55-6c39cabedb6c",
                            Email = "hamzaisah@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Hamza",
                            LastName = "Isah",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f7d52b2e-ee00-4298-8cdf-8c0cd784a953",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "666e993e-bd32-4097-a572-702228c0df60",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0049761-0ff4-4a65-a25f-7bc983b71802",
                            Email = "ugochukwu.anunihu@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ugochukwu",
                            LastName = "Anunihu",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9e344682-6057-4210-a892-dc12041688b4",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("AssetMon.Models.Asset", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Asset");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Asset");
                });

            modelBuilder.Entity("AssetMon.Models.Repair", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AssetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RepairName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("Repairs");

                    b.HasData(
                        new
                        {
                            Id = "f6040dcd-c639-4b07-94ce-0c7ef58d7250",
                            Amount = 3000m,
                            AssetId = "3e187f49-53b8-4049-b12d-3c80ab7a9048",
                            RepairName = "Shoe brakes"
                        },
                        new
                        {
                            Id = "8c5ccdaa-eda0-4d29-94cc-aac10a0883f1",
                            Amount = 3000m,
                            AssetId = "1c4690e6-3e15-40f6-a6a2-7bdfe48817a2",
                            RepairName = "Shoe brakes"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a640d483-e7fa-44bc-aed5-adae34139451",
                            ConcurrencyStamp = "32ef78ac-31d1-42ac-84a0-be052fff4bb5",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = "70fd24c6-124b-4a42-a294-fc75f9dd7ccd",
                            ConcurrencyStamp = "78ac7d62-b69c-4b9e-9f44-5c0cd732ad39",
                            Name = "Driver",
                            NormalizedName = "DRIVER"
                        },
                        new
                        {
                            Id = "55af4fe3-c19f-448f-804f-2576f14afd25",
                            ConcurrencyStamp = "a157b323-c940-437e-965a-dfe7d453640f",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AssetMon.Models.Vehicle", b =>
                {
                    b.HasBaseType("AssetMon.Models.Asset");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractType")
                        .HasColumnType("int");

                    b.Property<string>("DriverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentFrequency")
                        .HasColumnType("int");

                    b.Property<string>("PlateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Tenure")
                        .HasColumnType("int");

                    b.HasIndex("DriverId");

                    b.HasIndex("OwnerId");

                    b.HasDiscriminator().HasValue("Vehicle");

                    b.HasData(
                        new
                        {
                            Id = "96d62347-64d8-425b-8a66-4b8cd78fc5a3",
                            Name = "TVS",
                            Color = "Blue",
                            ContractType = 1,
                            DriverId = "6c649c3c-a0f1-4065-832a-193cd3d9085d",
                            IsActive = false,
                            OwnerId = "666e993e-bd32-4097-a572-702228c0df60",
                            PaymentAmount = 16000m,
                            PaymentFrequency = 1,
                            PlateNumber = "TVS-UMG-210-QR",
                            StartDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tenure = 0
                        },
                        new
                        {
                            Id = "1c4690e6-3e15-40f6-a6a2-7bdfe48817a2",
                            Name = "Piaggio",
                            Color = "Blue",
                            ContractType = 1,
                            DriverId = "1ee125f5-3be4-4bda-ae4c-d471762c414c",
                            IsActive = false,
                            OwnerId = "666e993e-bd32-4097-a572-702228c0df60",
                            PaymentAmount = 16000m,
                            PaymentFrequency = 1,
                            StartDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tenure = 0
                        },
                        new
                        {
                            Id = "3e187f49-53b8-4049-b12d-3c80ab7a9048",
                            Name = "TVS",
                            Color = "Blue",
                            ContractType = 1,
                            DriverId = "21443f16-6bfb-4b07-8f35-d4a876266d5b",
                            IsActive = false,
                            OwnerId = "666e993e-bd32-4097-a572-702228c0df60",
                            PaymentAmount = 16000m,
                            PaymentFrequency = 1,
                            PlateNumber = "TVS-M4L03958",
                            StartDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tenure = 0
                        },
                        new
                        {
                            Id = "e6ab22dc-f77a-4b94-8bef-ff8d2c9d16cb",
                            Name = "TVS",
                            Color = "Blue",
                            ContractType = 1,
                            DriverId = "d23d56ce-9953-4647-b594-340a50bf7320",
                            IsActive = false,
                            OwnerId = "666e993e-bd32-4097-a572-702228c0df60",
                            PaymentAmount = 16000m,
                            PaymentFrequency = 1,
                            PlateNumber = "TVS-M4L03941",
                            StartDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tenure = 0
                        });
                });

            modelBuilder.Entity("AssetMon.Models.Address", b =>
                {
                    b.HasOne("AssetMon.Models.AppUser", "AppUser")
                        .WithOne("Address")
                        .HasForeignKey("AssetMon.Models.Address", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("AssetMon.Models.Asset", b =>
                {
                    b.HasOne("AssetMon.Models.AppUser", null)
                        .WithMany("Assets")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("AssetMon.Models.Repair", b =>
                {
                    b.HasOne("AssetMon.Models.Asset", "Asset")
                        .WithMany("Repairs")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AssetMon.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AssetMon.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetMon.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AssetMon.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssetMon.Models.Vehicle", b =>
                {
                    b.HasOne("AssetMon.Models.AppUser", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("AssetMon.Models.AppUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Driver");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("AssetMon.Models.AppUser", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Assets");
                });

            modelBuilder.Entity("AssetMon.Models.Asset", b =>
                {
                    b.Navigation("Repairs");
                });
#pragma warning restore 612, 618
        }
    }
}
